/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.tp6;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author br1st
 */
public class BusquedaPorPrecioView extends javax.swing.JInternalFrame {
    
    private DefaultTableModel modelo = new DefaultTableModel() {
           
        @Override
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };


    /**
     * Creates new form BusquedaPorPrecioView
     */
    public BusquedaPorPrecioView() {
        initComponents();
        armarCabecera();
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtPrecioMin = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtPrecioMax = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtProductos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Listado por Precio");

        jLabel2.setText("Entre $:");

        jtPrecioMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtPrecioMinKeyPressed(evt);
            }
        });

        jLabel3.setText("y");

        jtPrecioMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtPrecioMaxKeyPressed(evt);
            }
        });

        jtProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtProductos);

        jButton1.setText("PressEnter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(12, 12, 12)
                                .addComponent(jtPrecioMin, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtPrecioMax, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(36, 36, 36)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtPrecioMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtPrecioMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtPrecioMinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPrecioMinKeyPressed
        // TODO add your handling code here:
        int tecla = evt.getKeyCode();
        if(tecla == 10) {
            administrarPrecios();
        }
    }//GEN-LAST:event_jtPrecioMinKeyPressed

    private void jtPrecioMaxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPrecioMaxKeyPressed
        // TODO add your handling code here:
        int tecla = evt.getKeyCode();
        if(tecla == 10) {

            administrarPrecios();
        }
    }//GEN-LAST:event_jtPrecioMaxKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        administrarPrecios();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void armarCabecera() {
        modelo.addColumn("Codigo");
        modelo.addColumn("Descripcion");
        modelo.addColumn("Precio");
        modelo.addColumn("Categoria");
        modelo.addColumn("Stock");
        jtProductos.setModel(modelo);
    }
    
    private void llenarTabla() {
        for(Producto prod:MenuView.listaProductos){
            modelo.addRow(new Object[]{
                    prod.getCodigo(),
                    prod.getDescripcion(),
                    prod.getPrecio(),
                    prod.getStock()
                });
        }
    }
    
    private void llenarTablaSegunPrecioMin(double precioMin) {

        if (precioMin >= 0.0) {

            for (Producto prod : MenuView.listaProductos) {

                if (prod.getPrecio() >= precioMin) {
                    modelo.addRow(new Object[]{
                        prod.getCodigo(),
                        prod.getDescripcion(),
                        prod.getPrecio(),
                        prod.getRubro(),
                        prod.getStock()
                    });
                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "No se aceptan numeros negativos");
        }

    }
    
    private void llenarTablaSegunPrecioMax(double precioMax) {

        if (precioMax > 0) {

            for (Producto prod : MenuView.listaProductos) {

                if (prod.getPrecio() <= precioMax) {
                    modelo.addRow(new Object[]{
                        prod.getCodigo(),
                        prod.getDescripcion(),
                        prod.getPrecio(),
                        prod.getRubro(),
                        prod.getStock()
                    });
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "El maximo debe ser mayor que 0");
        }

    }

    private void borrarFilas() {
        int filasOcupadas = jtProductos.getRowCount() - 1;
        for(;filasOcupadas>=0;filasOcupadas-- ){
            
            modelo.removeRow(filasOcupadas);
        }
    } 

    private void administrarPrecios(){
        String precioMin = jtPrecioMin.getText();
        String precioMax = jtPrecioMax.getText();
        
        if(precioMin.isBlank()){
            
            if(precioMax.isBlank()){
                
                JOptionPane.showMessageDialog(this, "Debe colocar algun precio");
                
            }else{
                
                try{
                    double precioMaximo = Double.parseDouble(precioMax);
                    borrarFilas();
                    llenarTablaSegunPrecioMax(precioMaximo);
                    
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(this, "El formato del precio maximo es incorrecto");
                }               
            }
            
        }else{
            
            if(precioMax.isBlank()){
                
                try{
                    double precioMinimo = Double.parseDouble(precioMin);
                    borrarFilas();
                    llenarTablaSegunPrecioMin(precioMinimo);
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(this, "El formato del precio minimo es incorrecto");
                }
                
            }else{
                
                try{
                    double precioMaximo = Double.parseDouble(precioMax);
                    double precioMinimo = Double.parseDouble(precioMin);
                    borrarFilas();
                llenarTablaConMinimoYMaximo(precioMinimo, precioMaximo);
                }catch(NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "El formato es incorrecto");
                }
                
            }
        }
    }
    
    private void llenarTablaConMinimoYMaximo(double precioMin, double precioMax){
        if(precioMin <= precioMax){
            for (Producto prod : MenuView.listaProductos) {

                if (precioMin <= prod.getPrecio() &&  prod.getPrecio() <= precioMax) {
                    modelo.addRow(new Object[]{
                        prod.getCodigo(),
                        prod.getDescripcion(),
                        prod.getPrecio(),
                        prod.getRubro(),
                        prod.getStock()
                    });
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtPrecioMax;
    private javax.swing.JTextField jtPrecioMin;
    private javax.swing.JTable jtProductos;
    // End of variables declaration//GEN-END:variables
}
